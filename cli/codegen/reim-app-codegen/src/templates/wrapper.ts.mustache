import { IWrapInstance} from "@polywrap/reim-new-wrap";

{{#globalFunctions}}
export type {{name}}Fn = (
  {{#args}}
  {{name}}: {{tsTypeName}}{{^last}},{{/last}}
  {{/args}}
) => Promise<{{returnType}}>;
{{/globalFunctions}}

export class {{wrapperName}}__factory {
  static async fromWrapper(wrapper: IWrapInstance): Promise<
  {
    {{#globalFunctions}}
    {{name}}: {{name}}Fn{{^last}},{{/last}}
    {{/globalFunctions}}
  }> {
    return {
      {{#globalFunctions}}
      {{name}}: async (
        {{#args}}
        {{name}}: {{tsTypeName}}{{^last}},{{/last}}
        {{/args}}
      ): Promise<{{returnType}}> => {
        const result = await wrapper.invokeGlobalFunction<unknown, {{returnType}}>(
          "{{name}}",
          {
            {{#args}}
            {{name}}{{^last}},{{/last}}
            {{/args}}
          }
        );

        if (!result.ok) {
          throw result.error;
        }

        return result.value;
      }{{^last}},{{/last}}
      {{/globalFunctions}}
    };
  }
}

export class {{wrapperName}} {
  constructor(public readonly __wrapper: IWrapInstance) {
  }

  public static __className: string = "{{wrapperName}}";
}
