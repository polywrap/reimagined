import { stringify } from '@serial-as/json'
import { IWrapInterface, wrapInstance } from '../../wrap/WrapInstance';
import { concat, u32ToBuffer } from '../../buffer';
import { HostResource } from "../../wrap/host-resources/HostResource";
import { invoke_host_resource } from "../../wrap/host-resources/invoke_host_resource";
{{#relatedTypes}}
{{#isClass}}
import { {{nativeTypeNameWrapped}} } from "../../wrapped";
{{/isClass}}
{{#isStruct}}
import { {{nativeTypeName}} } from "../../..";
{{/isStruct}}
{{/relatedTypes}}
{{^result.isClass}}
import { BaseTypeSerialization } from '../../serialization/BaseTypeSerialization';
{{/result.isClass}}

export const {{name}} = (
  {{#args}}
  {{model.name}}: {{model.typeInfo.nativeTypeName}},
  {{/args}}
): string => {
  return {{name}}FromInstance(
    wrapInstance,
    {{#args}}
    {{model.name}},
    {{/args}}
  );
}

export const {{name}}FromInstance = (
  instance: IWrapInterface, 
  {{#args}}
  {{model.name}}: {{model.typeInfo.nativeTypeName}},
  {{/args}}
): string => {
  const result = instance.invokeGlobalFunction<{{namePascalCase}}ArgsWrapped, string>(
    WrapManifest.External.GlobalFunction.{{namePascalCase}},
    {{namePascalCase}}ArgsWrapped.mapToSerializable(
      new {{namePascalCase}}Args(
        {{#args}}
        {{model.name}},
        {{/args}}
      )
    )
  );

  return result;
}

@serializable
export class {{namePascalCase}}ArgsWrapped {
  constructor(
    {{#args}}
    public {{model.name}}: {{model.typeInfo.nativeTypeNameWrapped}},
    {{/args}}
  ) {
  }

  static serialize(value: {{namePascalCase}}Args): ArrayBuffer {
    return String.UTF8.encode(
      stringify<{{namePascalCase}}ArgsWrapped>(
        {{namePascalCase}}ArgsWrapped.mapToSerializable(value)
      )
    );
  }

  static mapToSerializable(value: {{namePascalCase}}Args): {{namePascalCase}}ArgsWrapped {
    return new {{namePascalCase}}ArgsWrapped(
      {{#args}}
      {{#model.isClass}}
      {{model.typeInfo.nativeTypeNameWrapped}}.mapToSerializable(value.{{model.name}}),
      {{/model.isClass}}
      {{^model.isClass}}
      value.{{model.name}},
      {{/model.isClass}}
      {{/args}}
    );
  }
}

export class {{namePascalCase}}Args {
  constructor(
    {{#args}}
    public {{model.name}}: {{model.typeInfo.nativeTypeName}},
    {{/args}}
  ) {
  }
}
