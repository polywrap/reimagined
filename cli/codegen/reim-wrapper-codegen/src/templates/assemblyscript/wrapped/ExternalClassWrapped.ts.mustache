import { parse, stringify } from "@serial-as/json";
import { IExternalWrapInstance } from "@nerfzael/reim-wrap-as";
import { WrapManifest } from '../../WrapManifest';
import { WrapModule } from "../../external/module/WrapModule";
import { {{name}} } from "../../external/classes/{{name}}";
{{#relatedTypes}}
{{#isClass}}
import { {{nativeTypeNameWrapped}} } from "..";
{{/isClass}}
{{#isStruct}}
import { {{nativeTypeName}} } from "../../..";
{{/isStruct}}
{{/relatedTypes}}

const CLASS_NAME = "{{name}}";

class InstanceWithExternalReferencePtr {
  constructor(
    public externalReferencePtr: u32,
    public instance: {{name}}
  ) {
  }
}

export class {{name}}Wrapped {
  constructor(
    public __referencePtr: u32,
    {{#fields}}
    public {{model.name}}: {{model.typeInfo.nativeTypeNameWrapped}},
    {{/fields}}
  ) {
  }

  static referenceMap: Map<u32, InstanceWithExternalReferencePtr> = new Map<u32, InstanceWithExternalReferencePtr>();

  static dereference(referencePtr: u32): {{name}} {
    const object = {{name}}Wrapped.referenceMap.get(referencePtr);

    if (!object) {
      throw new Error(`Could not dereference ${CLASS_NAME}(${referencePtr}). Not found`);
    }

    return object.instance;
  }

  static deleteReference(referencePtr: u32): void {
    const success = {{name}}Wrapped.referenceMap.delete(referencePtr);

    if (!success) {
      throw new Error(`Could not delete reference ${CLASS_NAME}(${referencePtr}). Not found`);
    }
  }

  static serialize(value: {{name}}): ArrayBuffer {
    return String.UTF8.encode(
      stringify<{{name}}Wrapped>(
        {{name}}Wrapped.mapToSerializable(value)
      )
    );
  }

  static mapToSerializable(value: {{name}}): {{name}}Wrapped {
    const referencePtr = changetype<u32>(value);
    const existingReference = {{name}}Wrapped.referenceMap.get(referencePtr);

    if (!existingReference) {
      throw new Error(`Could not find external reference of ${CLASS_NAME}(${referencePtr}).`);
    }
  
    return new {{name}}Wrapped(
      existingReference.externalReferencePtr,
      {{#fields}}
      {{#model.typeInfo.isClass}}
      {{model.typeInfo.nativeTypeNameWrapped}}.mapToSerializable(value.{{model.name}}),
      {{/model.typeInfo.isClass}}
      {{^model.typeInfo.isClass}}
      value.{{model.name}},
      {{/model.typeInfo.isClass}}
      {{/fields}}
    );
  }

  static deserialize(buffer: ArrayBuffer, wrapInstance: IExternalWrapInstance): {{name}} {
    const object = parse<{{name}}Wrapped>(String.UTF8.decode(buffer));
  
    return {{name}}Wrapped.mapFromSerializable(object, wrapInstance);
  }

  static mapFromSerializable(value: {{name}}Wrapped, wrapInstance: IExternalWrapInstance): {{name}} {
    const object = new {{name}}(
      value.__referencePtr,
      wrapInstance,
      {{#fields}}
      {{#model.isClass}}
      {{model.typeInfo.nativeTypeNameWrapped}}.mapFromSerializable(value.{{model.name}}, wrapInstance),
      {{/model.isClass}}
      {{^model.isClass}}
      value.{{model.name}},
      {{/model.isClass}}
      {{/fields}}
    );

    const referencePtr = changetype<u32>(value);
  
    this.referenceMap.set(
      referencePtr, 
      new InstanceWithExternalReferencePtr(
        value.__referencePtr, 
        object
      )
    );  

    return object;
  }
}
