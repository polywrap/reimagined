import {
  Read,
  ReadDecoder,
  Write,
  WriteSizer,
  WriteEncoder,
  Option,
  BigInt,
  BigNumber,
  JSON,
  Context
} from "@polywrap/wasm-as";
import { Args } from "./args";

export function serializeType(type: Args): ArrayBuffer {
  const sizerContext: Context = new Context("Serializing (sizing) object-type: Args");
  const sizer = new WriteSizer(sizerContext);
  writeType(sizer, type);
  const buffer = new ArrayBuffer(sizer.length);
  const encoderContext: Context = new Context("Serializing (encoding) object-type: Args");
  const encoder = new WriteEncoder(buffer, sizer, encoderContext);
  writeType(encoder, type);
  return buffer;
}

export function writeType(writer: Write, type: Args): void {
  {{#args.length}}
  writer.writeMapLength({{args.length}});
  {{/args.length}}
  {{^args}}
  writer.writeMapLength(0);
  {{/args}}
  {{#args}}
  writer.context().push("{{name}}", "{{asTypeName}}", "writing property");
  writer.writeString("{{name}}");
  {{#scalar}}
  writer.write{{msgPackTypeName}}(type.{{name}});
  {{/scalar}}
  writer.context().pop();
  {{/args}}
}

export function deserializeType(buffer: ArrayBuffer): Args {
  const context: Context = new Context("Deserializing object-type {{name}}");
  const reader = new ReadDecoder(buffer, context);
  return readType(reader);
}

export function readType(reader: Read): Args {
  let numFields = reader.readMapLength();

  {{#args}}
  {{^object}}
  let _{{name}}: {{asTypeName}} = {{{asTypeInit}}};
  {{/object}}
  {{#required}}
  let _{{name}}Set: bool = false;
  {{/required}}
  {{/args}}

  while (numFields > 0) {
    numFields--;
    const field = reader.readString();

    reader.context().push(field, "unknown", "searching for property type");
    {{#args}}
    {{^first}}else {{/first}}if (field == "{{name}}") {
      reader.context().push(field, "{{asTypeName}}", "type found, reading property");
      {{#scalar}}
      _{{name}} = reader.read{{msgPackTypeName}}();
      {{/scalar}}
      {{#required}}
      _{{name}}Set = true;
      {{/required}}
      reader.context().pop();
    }
    {{/args}}
    reader.context().pop();
  }

  {{#args}}
  {{#required}}
  {{^object}}
  if (!_{{name}}Set) {
  {{/object}}
    throw new Error(reader.context().printWithContext("Missing required property: '{{name}}: {{type}}'"));
  }
  {{/required}}
  {{/args}}

  return {
    {{#args}}
    {{name}}: _{{name}}{{^last}},{{/last}}
    {{/args}}
  };
}
