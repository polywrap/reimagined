type Module {
  internalFunction(arg1: string, arg2: string): ExternalType @fn
  externalFunction(arg1: string, arg2: string): ExternalType @externalFn
}

type InternalType @class {
  create(ctorArg: String): InternalType @staticFn
  # Example of an instance method and instance state
  instanceMethod(arg: string): string @fn
  # Example of an instance method and instance state
  instanceMethodMultiArgs(arg1: string, arg2: string): string @fn
  # Example of returning a new class instance
  instanceReturningReference: InternalReferenceType @fn
  # Example of receiving an external class instance with a field (state)
  instanceReceivingReference(ext: ExternalInterface): string @fn
} 

type InternalReferenceType @class {
  count: u32
  create(arg: String): InternalReferenceType @staticFn
  getAddress: String @fn
} 

# Example of an external reference to receive
type ExternalInterface @class @external {
  count: u32
  instanceMethod(arg: string): String @fn
}

# Example of an internal type to instantiate
type ExternalType @class @external {
  count: u32
  test: ExternalInterface @fn
  create(arg: string): ExternalType @staticFn
  instanceMethod(arg: string): BasicObject @fn
}

# Example of an basic non-class object
type BasicObject @struct {
  count: u32
}
